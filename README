Name: Yutao Ren
ID: 7830517105

----------------------------------

What I've done:
The project focuses on the communication between client and serve using socket. As the application programming interface between applications and network, socket allows the applications "plug into" the network and communicate with other applications.

First of all, I set up with the TCP connection between client and AWS server, which allows client to send query input to AWS server, and receive the calculation output from server after the result is computed. In the meanwhile, the TCP connection between monitor and AWS server is also built for monitoring all the activities between client and server.

Next, I build the UDP connection between AWS server and server A, and between AWS server and server B, separately. At this time, AWS server acts as a client who sends the query input to storage server A and B to look up the database for detailed info.

Then, I set up with another UDP connection between AWS server and server C in order to take advantage of the computing ability of server C to get the output of delay. 

At this time, all the connections are successfully built, then the result can be easily sent back to AWS server over UDP, and finally sent to client and monitor over TCP by AWS server.

----------------------------------

Functionalities of each code file:
client.cpp: get the input from user, send the input to AWS server for further searching and computing, and output the delay to terminal after receiving the result from AWS server. 

monitor.cpp: monitor and output all the I/O activities to terminal by receiving corresponding input and output info from AWS server.

AWS.cpp: receive the input from client, send the input to storage server A and server B for searching the detailed info about the input. If "No Match" message is received from storage server, then send the "No Match" message back to client and monitor. Once there is a match, then send the input along with the detailed info to computing server C for calculation. When the calculation is done, send the calculation result back to client and monitor separately.

serverA.cpp: get the input from AWS server and search for the corresponding info from database, if there is a match, send the detailed info to the AWS server, if not, send the "No Match" message to AWS server.

serverB.cpp: have exactly the same functionality as serverA.cpp, except for that the search is implemented on a different database.

serverC.cpp: receive the input and detailed info from AWS server, compute the transmission delay, propagation delay and end-to-end delay, send the result back to AWS server. 

----------------------------------

The format of all the messages exchanged:
Client sends input to AWS server: argv[1] argv[2] argv[3].
AWS server sends input to monitor: store the link_ID, file_size and signal_power value in a vector called client_data, and send by client_data[0] client_data[1] client_data[2].
AWS server sends input to server A: client_data[0] client_data[1] client_data[2]
AWS server sends input to server B: client_data[0] client_data[1] client_data[2]
serverA sends searching info to AWS server: m indicates that if there is a match. Store all the detailed info in a vector called vect, and send by m vect[0] vect[1] vect[2]...vect[4]
serverB sends searching info to AWS server: m indicates that if there is a match. Store all the detailed info in a vector called vect, and send by m vect[0] vect[1] vect[2]...vect[4]
if there is not a match:
AWS server sends "No Match" result to client: outputResult
AWS server sends "No Match" result to monitor: outputResult
If there is a match: 
(if info is found by server A) AWS server sends detailed info to server C: client_data[0] client_data[1] client_data[2] vect_A_data[0] vect_A_data[1] vect_A_data[2] vect_A_data[3]
(if info is found by server B) AWS server sends detailed info to server C: client_data[0] client_data[1] client_data[2] vect_B_data[0] vect_B_data[1] vect_B_data[2] vect_B_data[3]
Server C sends calculation result to AWS server: Ttran Tprop Txfr
AWS server sends delay results to client: outputResult vect_C_data[2]
AWS server sends delay results to monitor: outputResult vect_C_data[0] vect_C_data[1] vect_C_data[2]

----------------------------------

Any idiosyncrasy of your project:
The test cases runs well on my VM.

----------------------------------

Reused Code:
Socket creation and port binding section is referred to Beej's. Socket sending and receiving is also referred to Beej's. 
 
